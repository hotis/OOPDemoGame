package oopdemogame;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

/**
 * Система проведения боя между группами персонажей.
 */
public class БоеваяСистема {
    /**
     * Проводит поочерёдные раунды боя между героями и врагами.
     *
     * @param герои список героев
     * @param враги список врагов
     */
    public static void провестиБой(List<Персонаж> герои, List<Персонаж> враги) {
        int раунд = 1;
        while (естьЖивыеГерои(герои) && естьЖивыеВраги(враги)) {
            System.out.println("\n=== Раунд " + раунд + " ===");

            // Ход героев
            for (Персонаж герой : герои) {
                if (!герой.жив()) continue;

                Персонаж цель = БоеваяСистема.найтиЖивогоВрага(враги);
                if (цель == null) continue;
                
                if (Math.random() < герой.шансУльты && герой instanceof СпециальныйПрием) {
                    ((СпециальныйПрием) герой).использоватьУльту(цель);
                } else {
                    герой.атаковать(враги); // Передаём список врагов   
                }       
            }

            // Ход врагов
            for (Персонаж враг : враги) {
                if (!враг.жив()) continue;

                Персонаж цель = БоеваяСистема.найтиЖивогоГероя(герои);
                if (цель == null) continue;
                
                if (Math.random() < враг.шансУльты && враг instanceof СпециальныйПрием) {
                    ((СпециальныйПрием) враг).использоватьУльту(цель);
                } else {
                    враг.атаковать(герои); // Передаём список героев
                }
            }

            раунд++;
        }

        if (естьЖивыеГерои(герои)) {
            System.out.println("\nГерои победили!");
        } else {
            System.out.println("\nВраги одержали верх...");
        }
    }
    
    /**
     * Проверяет, остались ли живые герои.
     *
     * @param герои список героев
     * @return true, если есть хотя бы один живой герой
     */
    private static boolean естьЖивыеГерои(List<Персонаж> герои) {
        for (Персонаж герой : герои) {
            if (герой.жив()) {
                return true;
            }
        }
        return false;
    }

    /**
     * Проверяет, остались ли живые враги.
     *
     * @param враги список врагов
     * @return true, если есть хотя бы один живой враг
     */
    private static boolean естьЖивыеВраги(List<Персонаж> враги) {
        for (Персонаж враг : враги) {
            if (враг.жив()) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * Находит случайного живого героя из списка.
     *
     * @param герои список героев
     * @return случайный живой герой или null, если таких нет
     */
    public static Персонаж найтиЖивогоГероя(List<Персонаж> герои) {
        List<Персонаж> живыеГерои = new ArrayList<>();
        for (Персонаж герой : герои) {
            if (герой.жив()) {
                живыеГерои.add(герой);
            }
        }

        if (живыеГерои.isEmpty()) {
            return null;
        }
        return живыеГерои.get(ThreadLocalRandom.current().nextInt(живыеГерои.size()));
    }

    /**
     * Находит случайного живого врага из списка.
     *
     * @param враги список врагов
     * @return случайный живой враг или null, если таких нет
     */
    public static Персонаж найтиЖивогоВрага(List<Персонаж> враги) {
        List<Персонаж> живыеВраги = new ArrayList<>();
        for (Персонаж враг : враги) {
            if (враг.жив()) {
                живыеВраги.add(враг);
            }
        }

        if (живыеВраги.isEmpty()) {
            return null;
        }

        return живыеВраги.get(ThreadLocalRandom.current().nextInt(живыеВраги.size()));
    }
}
